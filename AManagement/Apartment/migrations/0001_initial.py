# Generated by Django 4.2.14 on 2024-08-13 05:29

import ckeditor.fields
import cloudinary.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('stand', models.CharField(max_length=255)),
                ('describe', models.CharField(max_length=255)),
                ('box_status', models.CharField(choices=[('waiting to receive', 'Waiting'), ('received', 'Received')], default='waiting to receive', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='KHAO SAT...', max_length=200)),
                ('note', models.CharField(default='None', max_length=200)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_role', models.CharField(choices=[('Resident', 'Resident'), ('Admin', 'Admin')], default='Resident', max_length=20)),
                ('avatar_acount', cloudinary.models.CloudinaryField(max_length=255, null=True)),
                ('change_password_required', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('respondent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Apartment.survey')),
            ],
        ),
        migrations.AddField(
            model_name='survey',
            name='user_surveyor',
            field=models.ForeignKey(limit_choices_to={'user_role': 'Admin'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=300, null=True)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='Apartment.survey')),
            ],
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name_people', models.CharField(max_length=50)),
                ('birthday', models.DateTimeField(blank=True, null=True)),
                ('sex', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=20, null=True)),
                ('expiry', models.IntegerField()),
                ('ApartNum', models.CharField(max_length=20, null=True)),
                ('identification_card', models.CharField(max_length=20, null=True)),
                ('box', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Apartment.box')),
                ('user', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Letters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('title_letter', models.TextField(null=True)),
                ('content', ckeditor.fields.RichTextField(null=True)),
                ('img_letter', cloudinary.models.CloudinaryField(max_length=255, null=True)),
                ('feedback_results', models.CharField(max_length=255, null=True)),
                ('people', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Apartment.people')),
                ('user_admin', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Goods',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name_goods', models.CharField(max_length=255)),
                ('img_goods', cloudinary.models.CloudinaryField(max_length=255, null=True)),
                ('received_Goods', models.CharField(choices=[('Chờ nhận hàng', 'Wtr'), ('Đã lấy hàng', 'Received'), ('Người dùng đã nhận được hàng', 'Urg')], default='Chờ nhận hàng', max_length=50)),
                ('note', models.CharField(default='no notes', max_length=255)),
                ('size', models.CharField(max_length=255, null=True)),
                ('box', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Apartment.box')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CarCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('area', models.CharField(max_length=255)),
                ('status_card', models.CharField(choices=[('Unconfimred', 'Un'), ('Wait_for_confirmation', 'Wait'), ('Confirmed', 'Confirmer')], default='Wait_for_confirmation', max_length=50)),
                ('vehicle_type', models.CharField(default='motorbike', max_length=255)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='box',
            name='user_admin',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name_bill', models.CharField(max_length=255)),
                ('money', models.FloatField()),
                ('decription', models.CharField(max_length=255)),
                ('type_bill', models.CharField(choices=[('Electricity', 'Electricity'), ('Water ', 'Water'), ('Other', 'Other')], default='Other', max_length=50)),
                ('status_bill', models.CharField(choices=[('Unpaid', 'Unpaid'), ('paid', 'Paid')], default='Unpaid', max_length=50)),
                ('trading_code', models.CharField(max_length=255, null=True)),
                ('transaction_images', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
                ('payment_style', models.CharField(default='Null', max_length=255, null=True)),
                ('user_resident', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Apartment.question')),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='Apartment.surveyresponse')),
            ],
        ),
    ]
